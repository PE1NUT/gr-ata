id: ata_onoff
label: ATA On-Off
category: '[ATA]'


#  Make one 'parameters' list entry for every parameter you want settable from the GUI.
#     Keys include:
#     * id (makes the value accessible as \$keyname, e.g. in the make entry)
#     * label (label shown in the GUI)
#     * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
parameters:
- id: cfreq
  label: Center frequency (MHz)
  dtype: float
  default: 0.0
  
- id: ant_list
  label: List of antennas
  dtype: string
  default: "Ex: ant1, ant2, ant3, ..."

- id: coord_type
  label: Coordinate type
  dtype: string
  options: [id, radec, azel]
  option_labels: [Catalog Identifier, RA / Dec, Az / El]
  
- id: src
  label: Source ID
  dtype: string
  default: "casa"
  hide: ${ ('none' if coord_type.startswith('id') else 'all') }
  
- id: ra
  label: RA (decimal deg.)
  dtype: float
  default: 14.00
  hide: ${ ('none' if coord_type.startswith('radec') else 'all') }
  
- id: dec
  label: Dec. (decimal deg.)
  dtype: float
  default: 67.00
  hide: ${ ('none' if coord_type.startswith('radec') else 'all') }
  
- id: az
  label: Az. (decimal deg.)
  dtype: float
  default: 0.00
  hide: ${ ('none' if coord_type.startswith('azel') else 'all') }
  
- id: el
  label: Elev. (decimal deg.)
  dtype: float
  default: 18.00
  hide: ${ ('none' if coord_type.startswith('azel') else 'all') }
   
- id: az_off
  label: Azimuth offset (deg.)
  dtype: float
  default: 5.00
  
- id: el_off
  label: Elevation offset (deg.)
  dtype: float
  default: 0.00
  
- id: dur
  label: On-source duration (seconds)
  dtype: float

#  Make one 'inputs' list entry per input and one 'outputs' list entry per output.
#  Keys include:
#      * label (an identifier for the GUI)
#      * domain (optional - stream or message. Default is stream)
#      * dtype (e.g. int, float, complex, byte, short, xxx_vector, ...)
#      * vlen (optional - data stream vector length. Default is 1)
#      * optional (optional - set to 1 for optional inputs. Default is 0)

outputs:
- label: command
  domain: message
  optional: false

templates:
    imports: import ata
    make: |
        ata.onoff(${cfreq}, ${ant_list}, ${coord_type}, ${dur}, ${az_off}, ${el_off})
        % if context.get('coord_type')() == "azel":
        self.${id}.set_src_azel(${az}, ${el})
        % elif context.get('coord_type')() == "id":
        self.${id}.set_source(${src})
        % elif context.get('coord_type')() == "radec":
        self.${id}.set_src_radec(${ra}, ${dec})
        % endif

    callbacks: 
    - self.${id}.set_source(${src})
    - self.${id}.set_src_radec(${ra}, ${dec})       
    - self.${id}.set_src_azel(${az}, ${el})
    
documentation: |-
    This block contains instructions to run an on-off observation -- in which
    the antennas are instructed to point, first, at a target source for a given 
    duration, and then at an offset point at a given angle from the target 
    source. 

    To run an on-off observation, input your desired source location either in 
    RA / Dec, Az / El, or source identifier format, the list of antennas you want
    to observe with, the on-source duration (in seconds), the azimuth and elevation 
    offset values for your off-source scan, and the center frequency you want to
    observe at. Make sure you connect this block to the ATA Control block in order
    to run an observation (or an offline test). 
    
#  'file_format' specifies the version of the GRC yml format used in the file
#  and should usually not be changed.
file_format: 1
